---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: nessie
  namespace: data-platform
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: nessie
      version: "0.104.1"
      sourceRef:
        kind: HelmRepository
        name: nessie
        namespace: flux-system
  values:
    # Image configuration
    image:
      repository: ghcr.io/projectnessie/nessie
      tag: "0.104.1"
      pullPolicy: IfNotPresent

    # Service configuration
    service:
      type: ClusterIP
      port: 19120
      annotations: {}

    # Resource allocation
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"

    # Version store configuration - PostgreSQL via JDBC2
    versionStoreType: JDBC2
    jdbc:
      jdbcUrl: "jdbc:postgresql://nessie-postgres-rw.data-platform.svc.cluster.local:5432/nessie?currentSchema=nessie"
      secret:
        name: nessie-postgres-credentials
        username: postgres_username
        password: postgres_password

    # Catalog settings - Iceberg REST API configuration
    catalog:
      # Default branch
      defaultBranch: "main"
      # REQUIRED: Default warehouse for Iceberg REST API
      default-warehouse: "iceberg-warehouse"
      
      # Warehouse definitions - REQUIRED for Iceberg REST
      warehouses:
        iceberg-warehouse:
          location: "s3://iceberg-data/"
      
      # Iceberg configuration defaults pushed to clients
      iceberg-config-defaults:
        # S3 FileIO configuration
        io-impl: "org.apache.iceberg.aws.s3.S3FileIO"
        s3.endpoint: "http://rook-ceph-rgw-ceph-objectstore.storage.svc.cluster.local"
        s3.path-style-access: "true"
        s3.region: "us-east-1"
      
      # Object storage service configuration - REQUIRED for Iceberg REST
      service:
        s3:
          default-options:
            endpoint: "http://rook-ceph-rgw-ceph-objectstore.storage.svc.cluster.local"
            region: "us-east-1"
            auth-type: "STATIC"
            path-style-access: true

    # Authentication disabled for initial deployment
    authentication:
      enabled: false

    # Logging configuration
    logging:
      level: INFO
      format: JSON

    # JVM settings
    jvm:
      # Heap settings - adjust based on container memory
      heapSize: "1g"
      # Additional JVM options
      options: "-XX:+UseG1GC -XX:MaxGCPauseMillis=200"

    # Environment variables for S3 credentials (required for Iceberg REST)
    env:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: nessie-s3-credentials
            key: AccessKey
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: nessie-s3-credentials
            key: SecretKey

    # Liveness and readiness probes
    livenessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      httpGet:
        path: /api/v2/config
        port: 19120

    readinessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
      httpGet:
        path: /api/v2/config
        port: 19120

    # Pod annotations
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "19120"
      prometheus.io/path: "/metrics"

    # Pod security context
    podSecurityContext:
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 1000
      seccompProfile:
        type: RuntimeDefault

    # Container security context
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL

    # Service account
    serviceAccount:
      create: true
      name: nessie

    # Node selector
    nodeSelector: {}

    # Tolerations
    tolerations: []

    # Affinity
    affinity: {}

    # Ingress configuration (disabled for now, using port-forward)
    ingress:
      enabled: false