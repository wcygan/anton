---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: alloy
spec:
  interval: 1h
  chart:
    spec:
      chart: alloy
      version: 1.4.0
      sourceRef:
        kind: HelmRepository
        name: grafana
  install:
    remediation:
      retries: 3
    crds: CreateReplace
  upgrade:
    remediation:
      retries: 3
    cleanupOnFail: true
    crds: CreateReplace
  values:
    alloy:
      configMap:
        content: |-
          // Discover Kubernetes pods
          discovery.kubernetes "pods" {
            role = "pod"
          }

          // Scrape metrics from pods
          discovery.relabel "pods" {
            targets = discovery.kubernetes.pods.targets

            // Keep only pods with prometheus annotations
            rule {
              source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
              action = "keep"
              regex = "true"
            }

            // Set the metrics path
            rule {
              source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
              action = "replace"
              target_label = "__metrics_path__"
              regex = "(.+)"
            }

            // Set the port
            rule {
              source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"]
              action = "replace"
              regex = "([^:]+)(?::\\d+)?;(\\d+)"
              replacement = "$1:$2"
              target_label = "__address__"
            }

            // Add pod labels
            rule {
              action = "labelmap"
              regex = "__meta_kubernetes_pod_label_(.+)"
            }

            // Add namespace label
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              target_label = "namespace"
            }

            // Add pod name label
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              target_label = "pod"
            }
          }

          prometheus.scrape "pods" {
            targets = discovery.relabel.pods.output
            forward_to = [prometheus.remote_write.prometheus.receiver]
          }

          prometheus.remote_write "prometheus" {
            endpoint {
              url = "http://prometheus-operator-kube-prometheus-prometheus.observability.svc.cluster.local:9090/api/v1/write"
            }
          }

          // Collect logs from pods
          loki.source.kubernetes "pods" {
            targets    = discovery.kubernetes.pods.targets
            forward_to = [loki.write.loki.receiver]
          }

          loki.write "loki" {
            endpoint {
              url = "http://loki.observability.svc.cluster.local:3100/loki/api/v1/push"
            }
          }
    controller:
      type: daemonset
    serviceMonitor:
      enabled: true
