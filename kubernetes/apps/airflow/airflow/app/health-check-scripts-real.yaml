---
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-check-scripts-real
  namespace: airflow
data:
  k8s-health-check.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Kubernetes health check wrapper
    echo "Starting Kubernetes cluster health check..."
    
    # Check node status
    echo "=== Node Status ==="
    kubectl get nodes -o json | jq -r '.items[] | "\(.metadata.name): \(.status.conditions[] | select(.type=="Ready") | .status)"'
    
    # Check system pods
    echo ""
    echo "=== System Pods ==="
    UNHEALTHY_PODS=$(kubectl get pods -A -o json | jq -r '.items[] | select(.status.phase != "Running" and .status.phase != "Succeeded") | "\(.metadata.namespace)/\(.metadata.name): \(.status.phase)"')
    
    if [ -z "$UNHEALTHY_PODS" ]; then
      echo "All system pods are healthy"
      EXIT_CODE=0
    else
      echo "Unhealthy pods found:"
      echo "$UNHEALTHY_PODS"
      EXIT_CODE=2
    fi
    
    # Check for high restart counts
    echo ""
    echo "=== High Restart Counts ==="
    HIGH_RESTARTS=$(kubectl get pods -A -o json | jq -r '.items[] | select(.status.containerStatuses[0].restartCount > 5) | "\(.metadata.namespace)/\(.metadata.name): \(.status.containerStatuses[0].restartCount) restarts"')
    
    if [ -n "$HIGH_RESTARTS" ]; then
      echo "Pods with high restart counts:"
      echo "$HIGH_RESTARTS"
      [ $EXIT_CODE -eq 0 ] && EXIT_CODE=1
    else
      echo "No pods with excessive restarts"
    fi
    
    # Output JSON result
    if [ $EXIT_CODE -eq 0 ]; then
      echo '{"status": "healthy", "message": "All Kubernetes components are healthy"}'
    elif [ $EXIT_CODE -eq 1 ]; then
      echo '{"status": "warning", "message": "Some pods have high restart counts"}'
    else
      echo '{"status": "critical", "message": "Critical issues found in cluster"}'
    fi
    
    exit $EXIT_CODE

  storage-health-check.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Storage health check wrapper
    echo "Starting storage health check..."
    
    # Check PVC status
    echo "=== PVC Status ==="
    UNBOUND_PVCS=$(kubectl get pvc -A -o json | jq -r '.items[] | select(.status.phase != "Bound") | "\(.metadata.namespace)/\(.metadata.name): \(.status.phase)"')
    
    if [ -z "$UNBOUND_PVCS" ]; then
      echo "All PVCs are bound"
      EXIT_CODE=0
    else
      echo "Unbound PVCs found:"
      echo "$UNBOUND_PVCS"
      EXIT_CODE=2
    fi
    
    # Check Ceph health if available
    if kubectl get ns storage &>/dev/null && kubectl get deploy -n storage rook-ceph-tools &>/dev/null; then
      echo ""
      echo "=== Ceph Health ==="
      CEPH_STATUS=$(kubectl -n storage exec deploy/rook-ceph-tools -- ceph health 2>&1 || echo "HEALTH_UNKNOWN")
      echo "Ceph status: $CEPH_STATUS"
      
      if [[ "$CEPH_STATUS" == *"HEALTH_OK"* ]]; then
        echo "Ceph cluster is healthy"
      elif [[ "$CEPH_STATUS" == *"HEALTH_WARN"* ]]; then
        echo "Ceph cluster has warnings"
        [ $EXIT_CODE -eq 0 ] && EXIT_CODE=1
      elif [[ "$CEPH_STATUS" == *"HEALTH_ERR"* ]]; then
        echo "Ceph cluster has errors"
        EXIT_CODE=2
      fi
    fi
    
    # Output JSON result
    if [ $EXIT_CODE -eq 0 ]; then
      echo '{"status": "healthy", "message": "Storage systems are healthy"}'
    elif [ $EXIT_CODE -eq 1 ]; then
      echo '{"status": "warning", "message": "Storage systems have warnings"}'
    else
      echo '{"status": "critical", "message": "Storage systems have critical issues"}'
    fi
    
    exit $EXIT_CODE

  network-monitor.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Network health check wrapper
    echo "Starting network health check..."
    
    # Check ingress controllers
    echo "=== Ingress Controllers ==="
    INGRESS_STATUS=$(kubectl get pods -n network -o json | jq -r '.items[] | select(.metadata.labels.app == "ingress-nginx") | "\(.metadata.name): \(.status.phase)"')
    
    if [[ "$INGRESS_STATUS" == *"Running"* ]]; then
      echo "Ingress controllers are healthy"
      EXIT_CODE=0
    else
      echo "Ingress controller issues:"
      echo "$INGRESS_STATUS"
      EXIT_CODE=2
    fi
    
    # Check services
    echo ""
    echo "=== Service Endpoints ==="
    SERVICES_WITHOUT_ENDPOINTS=$(kubectl get endpoints -A -o json | jq -r '.items[] | select(.subsets == null or (.subsets | length) == 0) | "\(.metadata.namespace)/\(.metadata.name)"' | grep -v "kubernetes" || true)
    
    if [ -z "$SERVICES_WITHOUT_ENDPOINTS" ]; then
      echo "All services have endpoints"
    else
      echo "Services without endpoints:"
      echo "$SERVICES_WITHOUT_ENDPOINTS"
      [ $EXIT_CODE -eq 0 ] && EXIT_CODE=1
    fi
    
    # Output JSON result
    if [ $EXIT_CODE -eq 0 ]; then
      echo '{"status": "healthy", "message": "Network components are healthy"}'
    elif [ $EXIT_CODE -eq 1 ]; then
      echo '{"status": "warning", "message": "Some services lack endpoints"}'
    else
      echo '{"status": "critical", "message": "Network components have critical issues"}'
    fi
    
    exit $EXIT_CODE

  flux-deployment-check.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Flux deployment health check wrapper
    echo "Starting Flux deployment check..."
    
    # Check Flux components using kubectl since flux CLI might not be available
    echo "=== Flux Components ==="
    FLUX_PODS=$(kubectl get pods -n flux-system -o json | jq -r '.items[] | select(.status.phase != "Running") | .metadata.name')
    
    if [ -z "$FLUX_PODS" ]; then
      echo "All Flux components are healthy"
      EXIT_CODE=0
    else
      echo "Unhealthy Flux pods:"
      echo "$FLUX_PODS"
      EXIT_CODE=1
    fi
    
    # Check HelmReleases
    echo ""
    echo "=== Failed HelmReleases ==="
    FAILED_HR=$(kubectl get hr -A -o json | jq -r '.items[] | select(.status.conditions[] | select(.type=="Ready" and .status=="False")) | "\(.metadata.namespace)/\(.metadata.name)"')
    
    if [ -z "$FAILED_HR" ]; then
      echo "All HelmReleases are ready"
    else
      echo "Failed HelmReleases:"
      echo "$FAILED_HR"
      EXIT_CODE=2
    fi
    
    # Output JSON result
    if [ $EXIT_CODE -eq 0 ]; then
      echo '{"status": "healthy", "message": "GitOps deployments are healthy"}'
    elif [ $EXIT_CODE -eq 1 ]; then
      echo '{"status": "warning", "message": "Flux has minor issues"}'
    else
      echo '{"status": "critical", "message": "HelmRelease failures detected"}'
    fi
    
    exit $EXIT_CODE