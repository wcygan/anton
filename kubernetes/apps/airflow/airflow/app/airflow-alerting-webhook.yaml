---
# Webhook alerting service for Airflow health checks
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-webhook-handler
  namespace: airflow
data:
  webhook-handler.py: |
    #!/usr/bin/env python3
    """
    Simple webhook handler for Airflow alerts
    Forwards alerts to various destinations
    """
    import json
    import os
    import requests
    from datetime import datetime
    from http.server import HTTPServer, BaseHTTPRequestHandler
    
    class WebhookHandler(BaseHTTPRequestHandler):
        def do_POST(self):
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                alert_data = json.loads(post_data.decode('utf-8'))
                
                # Log the alert
                timestamp = datetime.utcnow().isoformat()
                print(f"[{timestamp}] Alert received: {json.dumps(alert_data, indent=2)}")
                
                # Forward to Prometheus AlertManager if configured
                alertmanager_url = os.getenv('ALERTMANAGER_URL')
                if alertmanager_url:
                    self.forward_to_alertmanager(alert_data, alertmanager_url)
                
                # Forward to Slack if configured
                slack_webhook = os.getenv('SLACK_WEBHOOK_URL')
                if slack_webhook:
                    self.forward_to_slack(alert_data, slack_webhook)
                
                # Send success response
                self.send_response(200)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"status": "received"}).encode())
                
            except Exception as e:
                print(f"Error processing webhook: {e}")
                self.send_response(500)
                self.end_headers()
        
        def forward_to_alertmanager(self, alert_data, url):
            """Forward alert to Prometheus AlertManager"""
            try:
                alerts = [{
                    "labels": {
                        "alertname": "KubernetesHealthCheckFailure",
                        "severity": alert_data.get('severity', 'critical'),
                        "service": "airflow-health-monitoring",
                        "check": alert_data.get('check_name', 'unknown'),
                        "cluster": "homelab"
                    },
                    "annotations": {
                        "description": alert_data.get('message', 'Health check failure'),
                        "summary": f"Health check {alert_data.get('check_name')} failed",
                        "failures": json.dumps(alert_data.get('failures', [])),
                    },
                    "startsAt": datetime.utcnow().isoformat() + "Z"
                }]
                
                response = requests.post(
                    f"{url}/api/v1/alerts",
                    json=alerts,
                    timeout=10
                )
                print(f"AlertManager response: {response.status_code}")
            except Exception as e:
                print(f"Failed to forward to AlertManager: {e}")
        
        def forward_to_slack(self, alert_data, webhook_url):
            """Forward alert to Slack"""
            try:
                severity_emoji = {
                    'critical': 'üö®',
                    'warning': '‚ö†Ô∏è',
                    'info': '‚ÑπÔ∏è'
                }.get(alert_data.get('severity', 'critical'), 'üîî')
                
                failures = alert_data.get('failures', [])
                failure_text = '\n'.join([f"‚Ä¢ {f}" for f in failures])
                
                slack_message = {
                    "text": f"{severity_emoji} Kubernetes Health Check Alert",
                    "blocks": [
                        {
                            "type": "header",
                            "text": {
                                "type": "plain_text",
                                "text": "üè• Cluster Health Alert"
                            }
                        },
                        {
                            "type": "section",
                            "fields": [
                                {"type": "mrkdwn", "text": f"*Severity:* {alert_data.get('severity', 'unknown')}"},
                                {"type": "mrkdwn", "text": f"*Time:* {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}"}
                            ]
                        },
                        {
                            "type": "section",
                            "text": {
                                "type": "mrkdwn",
                                "text": f"*Failures:*\n{failure_text}"
                            }
                        }
                    ]
                }
                
                response = requests.post(webhook_url, json=slack_message, timeout=10)
                print(f"Slack response: {response.status_code}")
            except Exception as e:
                print(f"Failed to forward to Slack: {e}")
    
    if __name__ == '__main__':
        port = int(os.getenv('WEBHOOK_PORT', '8080'))
        server = HTTPServer(('', port), WebhookHandler)
        print(f"Webhook handler listening on port {port}")
        server.serve_forever()

---
# Deployment for webhook handler
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webhook-handler
  namespace: airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-webhook-handler
  template:
    metadata:
      labels:
        app: airflow-webhook-handler
    spec:
      containers:
      - name: webhook-handler
        image: python:3.11-slim
        command: ["sh", "-c", "pip install requests && python /app/webhook-handler.py"]
        env:
        - name: WEBHOOK_PORT
          value: "8080"
        - name: ALERTMANAGER_URL
          value: "http://prometheus-alertmanager.monitoring.svc.cluster.local:9093"
        # Uncomment and configure for Slack
        # - name: SLACK_WEBHOOK_URL
        #   valueFrom:
        #     secretKeyRef:
        #       name: airflow-slack-webhook
        #       key: url
        ports:
        - containerPort: 8080
          name: webhook
        volumeMounts:
        - name: webhook-script
          mountPath: /app
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: webhook-script
        configMap:
          name: airflow-webhook-handler
          defaultMode: 0755

---
# Service for webhook handler
apiVersion: v1
kind: Service
metadata:
  name: airflow-webhook-handler
  namespace: airflow
spec:
  selector:
    app: airflow-webhook-handler
  ports:
  - port: 8080
    targetPort: 8080
    name: webhook
  type: ClusterIP