---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: trino
  namespace: data-platform
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: trino
      version: "0.28.0"
      sourceRef:
        kind: HelmRepository
        name: trino
        namespace: flux-system
  values:
    # Image configuration
    image:
      repository: trinodb/trino
      tag: "463"
      pullPolicy: IfNotPresent

    # Service configuration
    service:
      type: ClusterIP
      port: 8080

    # Coordinator configuration
    coordinator:
      jvm:
        maxHeapSize: "1600M"
        gcMethod:
          type: "UseG1GC"
          g1:
            heapRegionSize: "32M"
      
      config:
        memory:
          heapHeadroomPerNode: "256MB"
        query:
          maxMemory: "2GB"
          maxMemoryPerNode: "1GB"
          maxTotalMemory: "4GB"

      resources:
        requests:
          memory: "2Gi"
          cpu: "1000m"
        limits:
          memory: "4Gi"
          cpu: "2000m"

      livenessProbe:
        initialDelaySeconds: 60
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 6

      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 6

    # Worker configuration
    worker:
      replicas: 2
      
      jvm:
        maxHeapSize: "2400M"
        gcMethod:
          type: "UseG1GC"
          g1:
            heapRegionSize: "32M"

      config:
        memory:
          heapHeadroomPerNode: "256MB"

      resources:
        requests:
          memory: "3Gi"
          cpu: "1500m"
        limits:
          memory: "6Gi"
          cpu: "3000m"

      livenessProbe:
        initialDelaySeconds: 60
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 6

      readinessProbe:
        initialDelaySeconds: 10
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 6

    # Server configuration
    server:
      node:
        environment: "production"
        dataDir: "/data/trino"
        pluginDir: "/usr/lib/trino/plugin"

      config:
        path: /etc/trino
        http:
          port: 8080
        processForwarded: false

    # Authentication - disabled for initial deployment
    auth: {}

    # Catalogs configuration
    additionalCatalogs:
      iceberg: |
        connector.name=iceberg
        iceberg.catalog.type=rest
        iceberg.rest-catalog.uri=http://nessie.data-platform.svc.cluster.local:19120/api/v2
        iceberg.rest-catalog.warehouse=s3a://iceberg-data/
        # S3 configuration using existing Ceph ObjectStore
        fs.s3a.endpoint=http://rook-ceph-rgw-ceph-objectstore.storage.svc.cluster.local
        fs.s3a.access-key=${ENV:S3_ACCESS_KEY}
        fs.s3a.secret-key=${ENV:S3_SECRET_KEY}
        fs.s3a.path-style-access=true
        fs.s3a.ssl.enabled=false
        # Performance optimizations
        fs.s3a.connection.maximum=100
        fs.s3a.fast-upload=true
        fs.s3a.multipart.size=67108864
        fs.s3a.multipart.threshold=134217728

      system: |
        connector.name=system

    # Environment variables for S3 credentials
    env:
      - name: S3_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: rook-ceph-object-user-storage-iceberg
            key: AccessKey
      - name: S3_SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: rook-ceph-object-user-storage-iceberg
            key: SecretKey

    # Security configuration
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000

    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Trino needs to write to temp directories
      capabilities:
        drop:
          - ALL

    # Pod annotations for monitoring
    commonAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8080"
      prometheus.io/path: "/ui/api/stats"

    # Service account
    serviceAccount:
      create: true
      name: "trino"

    # Node selector and scheduling
    nodeSelector: {}
    tolerations: []
    affinity: {}

    # Additional server configuration properties
    additionalConfigProperties: |
      # Web UI settings
      web-ui.enabled=true
      
      # Query execution settings
      query.max-execution-time=30m
      query.max-planning-time=10m
      query.max-run-time=1h
      
      # Exchange settings for distributed queries
      exchange.max-buffer-size=64MB
      exchange.client-threads=25
      exchange.concurrent-request-multiplier=3