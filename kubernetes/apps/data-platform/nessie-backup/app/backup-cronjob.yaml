apiVersion: batch/v1
kind: CronJob
metadata:
  name: nessie-backup
  namespace: data-platform
  labels:
    app.kubernetes.io/name: nessie-backup
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: data-platform
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: nessie-backup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: backup
            image: postgres:15-alpine
            command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Starting Nessie metadata backup at $(date)"
              
              # Create backup directory
              mkdir -p /backup
              
              # Generate backup filename with timestamp
              BACKUP_FILE="/backup/nessie-backup-$(date +%Y%m%d-%H%M%S).sql"
              
              # Create PostgreSQL backup
              echo "Creating PostgreSQL backup..."
              PGPASSWORD="${POSTGRES_PASSWORD}" pg_dump \
                -h "${POSTGRES_HOST}" \
                -U "${POSTGRES_USER}" \
                -d "${POSTGRES_DB}" \
                --clean \
                --if-exists \
                --verbose > "${BACKUP_FILE}"
              
              echo "Backup created: ${BACKUP_FILE}"
              echo "Backup size: $(ls -lh ${BACKUP_FILE} | awk '{print $5}')"
              
              # Verify backup file is not empty
              if [ ! -s "${BACKUP_FILE}" ]; then
                echo "ERROR: Backup file is empty"
                exit 1
              fi
              
              # Show backup contents summary
              echo "Backup contains $(grep -c '^CREATE TABLE' ${BACKUP_FILE} || echo 0) CREATE TABLE statements"
              echo "Backup contains $(grep -c '^INSERT INTO' ${BACKUP_FILE} || echo 0) INSERT statements"
              
              echo "Nessie backup completed successfully at $(date)"
            env:
            - name: POSTGRES_HOST
              value: "nessie-postgres-rw"
            - name: POSTGRES_DB
              value: "nessie"
            - name: POSTGRES_USER
              value: "nessie"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nessie-postgres-app
                  key: password
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: nessie-backup-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nessie-backup-pvc
  namespace: data-platform
  labels:
    app.kubernetes.io/name: nessie-backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: ceph-block