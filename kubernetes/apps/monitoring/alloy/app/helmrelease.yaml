---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: alloy
  namespace: monitoring
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: alloy
      version: 1.1.1  # Latest stable version
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  install:
    crds: Skip
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      strategy: rollback
      retries: 3
  values:
    alloy:
      configMap:
        create: true
        content: |
          logging {
            level = "info"
          }
          
          // Kubernetes discovery
          discovery.kubernetes "pods" {
            role = "pod"
          }
          
          // Relabel pods
          discovery.relabel "pods" {
            targets = discovery.kubernetes.pods.targets
            
            // Keep only running pods
            rule {
              source_labels = ["__meta_kubernetes_pod_phase"]
              regex         = "Pending|Succeeded|Failed|Completed|Unknown"
              action        = "drop"
            }
            
            // Add labels
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              target_label  = "namespace"
            }
            
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              target_label  = "pod"
            }
            
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              target_label  = "container"
            }
            
            rule {
              source_labels = ["__meta_kubernetes_pod_node_name"]
              target_label  = "node"
            }
            
            // Add all pod labels
            rule {
              action = "labelmap"
              regex  = "__meta_kubernetes_pod_label_(.+)"
            }
            
            // Set path to container logs
            rule {
              source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
              target_label  = "__path__"
              separator     = "/"
              replacement   = "/var/log/pods/*$1/$2/*.log"
            }
          }
          
          // Collect logs - using correct component name for Alloy v1.9.1
          loki.source.kubernetes "pods" {
            targets    = discovery.relabel.pods.output
            forward_to = [loki.process.logs.receiver]
            
            // Enable tailing
            tail_from_end = true
          }
          
          // Process logs
          loki.process "logs" {
            forward_to = [loki.write.default.receiver]
            
            // Parse JSON logs if present
            stage.json {
              expressions = {
                output = "log",
                level  = "level",
              }
            }
            
            // Extract level from message if not in JSON
            stage.regex {
              expression = "(?P<level>TRACE|DEBUG|INFO|WARN|ERROR|FATAL)"
            }
            
            // Add labels
            stage.labels {
              values = {
                level = "",
              }
            }
            
            // Drop debug logs from noisy sources
            stage.drop {
              source = "namespace"
              expression = "kube-public"
            }
          }
          
          // Write to Loki
          loki.write "default" {
            endpoint {
              url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
            }
          }
          
          // Export metrics
          prometheus.exporter.self "alloy" {}
          
          // Scrape own metrics
          prometheus.scrape "alloy" {
            targets = prometheus.exporter.self.alloy.targets
            forward_to = [prometheus.remote_write.monitoring.receiver]
          }
          
          // Send metrics to Prometheus
          prometheus.remote_write "monitoring" {
            endpoint {
              url = "http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
            }
          }
    
    # Controller configuration
    controller:
      type: daemonset
      
      # Resources
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
      
      # Volume configuration for Talos/containerd
      extraVolumes:
        - name: varlog
          hostPath:
            path: /var/log
            type: Directory
      
      extraVolumeMounts:
        - name: varlog
          mountPath: /var/log
          readOnly: true
      
      # Security context
      securityContext:
        privileged: true
        runAsUser: 0
    
    # Service monitor
    serviceMonitor:
      enabled: true