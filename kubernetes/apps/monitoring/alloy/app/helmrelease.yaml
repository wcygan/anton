---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: alloy
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: alloy
      version: 0.10.2
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  values:
    alloy:
      clustering:
        enabled: false
      configMap:
        create: true
        content: |
          // Discover Kubernetes pods and collect logs
          discovery.kubernetes "pods" {
            role = "pod"
          }

          // Filter out unneeded pods
          discovery.relabel "pod_logs" {
            targets = discovery.kubernetes.pods.targets
            
            // Keep pod labels
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
              target_label  = "app"
            }
            
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              target_label  = "namespace"
            }
            
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              target_label  = "pod"
            }
            
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              target_label  = "container"
            }
          }

          // Collect logs from Kubernetes pods
          loki.source.kubernetes "pod_logs" {
            targets    = discovery.relabel.pod_logs.output
            forward_to = [loki.process.pod_logs.receiver]
          }

          // Process logs
          loki.process "pod_logs" {
            forward_to = [loki.write.default.receiver]
            
            // Parse JSON logs
            stage.json {
              expressions = {
                timestamp = "timestamp",
                level     = "level",
                message   = "message",
              }
            }
            
            // Use parsed timestamp if available
            stage.timestamp {
              source = "timestamp"
              format = "RFC3339"
              fallback_formats = ["UnixMs", "UnixUs", "UnixNs"]
            }
            
            // Set level label if found
            stage.labels {
              values = {
                level = "level",
              }
            }
          }

          // Write logs to Loki
          loki.write "default" {
            endpoint {
              url = "http://loki:3100/loki/api/v1/push"
            }
          }
    controller:
      type: daemonset
    serviceMonitor:
      enabled: true