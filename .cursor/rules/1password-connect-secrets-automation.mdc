---
description:
globs:
alwaysApply: true
---
# 1Password Connect Secrets Automation with ESO

## Purpose

This rule describes how to configure the External Secrets Operator (ESO) to consume secrets from a 1Password Connect Server using the 1Password Secrets Automation provider.

## Scope

Applies to all ESO resources under `kubernetes/apps/**` or any namespace where you use the 1Password Connect Secrets Automation provider.

## Prerequisites

- A running 1Password Connect Server (v1.5.6+) with its `1password-credentials.json` file available.
- A Connect **Access Token** generated via `op connect token create`.

## Steps

1. **Setup Access Token Secret**
   Bootstrap the Connect token Secret by running:
   ```bash
   kubectl create secret generic onepassword-connect-token \
     --from-literal=token='<YOUR_CONNECT_TOKEN>' \
     -n external-secrets
   ```

2. **Provide Connect Server Credentials**
   Bootstrap the credentials Secret by running:
   ```bash
   kubectl create secret generic connect-server-credentials \
     --from-file=1password-credentials.json=/path/to/1password-credentials.json \
     -n external-secrets
   ```
   Then ensure your Connect Server Deployment mounts this Secret into `OP_SESSION` (see your Deployment manifest).

3. **Define a SecretStore/ClusterSecretStore**
   Point ESO at your Connect Server and reference the token Secret:
   ```yaml
   apiVersion: external-secrets.io/v1alpha1
   kind: ClusterSecretStore
   metadata:
     name: onepassword
   spec:
     provider:
       onepassword:
         connectHost: http://onepassword-connect.external-secrets.svc.cluster.local:8080
         vaults:
           my-vault: 1
         auth:
           secretRef:
             connectTokenSecretRef:
               name: onepassword-connect-token
               namespace: external-secrets
               key: token
   ```

4. **Create ExternalSecret(s)**
   Map 1Password Items to Kubernetes Secret keys:
   ```yaml
   apiVersion: external-secrets.io/v1
   kind: ExternalSecret
   metadata:
     name: my-app-config
     namespace: my-app
   spec:
     secretStoreRef:
       kind: ClusterSecretStore
       name: onepassword
     target:
       creationPolicy: Owner
     data:
       - secretKey: DB_PASSWORD
         remoteRef:
           key: DatabaseCredentials    # Item title in 1Password
           property: password          # field label or file name
   ```

## Behavior & Best Practices

- **Item Mapping**
  - `remoteRef.key` ↔︎ Item Title
  - `remoteRef.property` ↔︎ field label (Password type) or file name (Document type)
  - If `property` is omitted, defaults to first file or built-in `password` field.

- **Supported Types**
  - **Password** Items can expose multiple fields.
  - **Document** Items can expose files.

- **Ordered Vaults**
  You can define an ordered list of vaults in the SecretStore, falling back if the Item is not found in the first.

- **Bulk Extraction (`dataFrom`)**
  Use `dataFrom.extract` or `dataFrom.find` to import multiple keys via regex or tags.

- **Deprecation Notice**
  The Secrets Automation provider is deprecated in favor of the [1Password SDK provider](mdc:external-secrets.io/latest/provider/1password-sdk), which removes the need for a Connect Server and uses the official SDK directly.
