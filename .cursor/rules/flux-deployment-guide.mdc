---
description:
globs:
alwaysApply: true
---
description: "Comprehensive end-to-end guide for managing Flux deployments on a Talos cluster. Covers core setup, adding/modifying/deleting apps (Helm, Kustomize, SOPS), Flux discovery, troubleshooting, and best practices. SOPS is for legacy secrets."

# Flux Deployment Management Guide for Your Talos Cluster

This guide provides a comprehensive, end-to-end process for managing software deployments within your Talos-based Kubernetes cluster using Flux. It covers adding new applications, modifying existing ones, and deleting them, along with best practices and troubleshooting tips.

## 0. Understanding the Core Setup

Before managing deployments, ensure you understand:

*   **GitOps with Flux:** Your cluster state is defined in this Git repository. Flux continuously synchronizes this repository with your cluster. Changes are made by committing to Git.
*   **Repository Structure:**
    *   `kubernetes/apps/`: Primary location for individual application configurations.
    *   `kubernetes/components/`: Shared components, base Kustomize layers, common `HelmRepository` definitions.
    *   `kubernetes/flux/`: Flux's own configuration, including the primary `Kustomization` that bootstraps the cluster.
    *   `cluster.yaml` and `nodes.yaml` These define core cluster and node parameters. While gitignored by default in the template, their values are crucial for templating if `makejinja` is used before Flux sees the manifests.
    *   `Taskfile.yaml` (mdc:Taskfile.yaml): Contains helper tasks for managing the cluster.
*   **SOPS for Secrets:** All sensitive data (API keys, credentials) must be encrypted using SOPS with the master `age.key` (mdc:age.key). Flux decrypts these secrets on the fly.
*   **Helm & Kustomize:** Flux orchestrates deployments primarily using `HelmRelease` and `Kustomization` Custom Resources (CRs).

## 1. Adding a New Deployment

This is the most common operation. The goal is to declaratively add your application's manifests to the Git repository so Flux can deploy it.

### Step 1.1: Choose a Location & Create Directory
For a new application, say "WebApp", create a dedicated directory:
`kubernetes/apps/webapp/`

### Step 1.2: Prepare Application Manifests
You have several options:

*   **A) Using a Helm Chart (Recommended for most applications):**
    This involves creating a `HelmRelease` CR.
    1.  **Identify Helm Chart:** Find the Helm chart for "WebApp". It could be from a public repository (e.g., Bitnami, Artifact Hub) or a private one. Note the chart name, version, and repository URL.
    2.  **Define `HelmRepository` (if new):**
        If the chart's repository isn't already defined, add a `HelmRepository` CR. **This MUST be done by creating a YAML file for the `HelmRepository` under `kubernetes/flux/meta/repos/` and adding it to the `resources` list in `kubernetes/flux/meta/repos/kustomization.yaml`.** (See the `flux-helmrepository-placement-rule.mdc` or `flux-source-crds-placement-rule.mdc` for details.)
        ```yaml
        # Example: kubernetes/flux/meta/repos/webapp-chart-repo.yaml
        ---
        apiVersion: source.toolkit.fluxcd.io/v1
        kind: HelmRepository
        metadata:
          name: webapp-chart-repo # e.g., bitnami, my-org-charts
          namespace: flux-system # Usually flux-system
        spec:
          interval: 1h # How often to fetch new chart versions
          url: https://charts.example.com/ # URL of the Helm repository
          # For OCI registries:
          # type: oci
          # url: oci://ghcr.io/my-org/charts
        ```
    3.  **Create `HelmRelease` CR:** In `kubernetes/apps/webapp/helmrelease.yaml`:
        ```yaml
        ---
        apiVersion: helm.toolkit.fluxcd.io/v2
        kind: HelmRelease
        metadata:
          name: webapp # Release name
          namespace: webapp-ns # Target namespace for the application
        spec:
          interval: 15m # How often Flux checks for changes to this HelmRelease or chart
          chart:
            spec:
              chart: webapp-chart-name # Name of the chart in the repository
              version: "1.2.3" # Specify a pinned version! Avoid "latest" or ranges in production.
              sourceRef:
                kind: HelmRepository
                name: webapp-chart-repo # Matches metadata.name of the HelmRepository CR
                namespace: flux-system # Namespace of the HelmRepository CR
              # interval: 5m # Optional: override sourceRef's interval for this chart
          releaseName: webapp # Can be same as metadata.name
          targetNamespace: webapp-ns # Explicitly define target namespace again (good practice)
          # dependsOn: # If this app depends on another Flux-managed component
          #   - name: cert-manager
          #     namespace: cert-manager
          #   - name: ingress-nginx-internal # Example
          #     namespace: network
          install:
            createNamespace: true # Set to true to have Helm/Flux create the targetNamespace
            remediation:
              retries: 3 # How many times to retry on installation failure
          upgrade:
            remediation:
              retries: 3
              remediateLastFailure: true # Attempt to remediate last failed upgrade on next run
            cleanupOnFail: true
          # Values to override chart defaults
          values:
            replicaCount: 1
            image:
              repository: my-docker-registry/webapp
              tag: "v0.1.0" # Pin image tags!
            service:
              type: ClusterIP
              port: 8080
            # Example Ingress (refer to your ingress-nginx setup)
            ingress:
              enabled: true
              className: "nginx-internal" # Or your external class from cluster.yaml
              annotations:
                cert-manager.io/cluster-issuer: "letsencrypt-production" # If using cert-manager
                # Add other necessary annotations
              hosts:
                - host: webapp.{{ .Values.cluster.dns.domain }} # Example using values from a common ConfigMap or valuesFrom
                  paths:
                    - path: /
                      pathType: Prefix
            resources:
              requests:
                cpu: "100m"
                memory: "128Mi"
              limits:
                cpu: "500m"
                memory: "512Mi"
            # valuesFrom: # To load values from ConfigMaps or Secrets
            # - kind: ConfigMap
            #   name: webapp-common-config
            #   valuesKey: common-values.yaml # Optional key within the ConfigMap data
            #   targetPath: commonConfig # Optional: prefix for these values
        ```

*   **B) Using Kustomize:**
    If you need to customize plain YAML manifests or an existing Helm chart further.
    1.  Place your base YAML manifests (Deployments, Services, etc.) in `kubernetes/apps/webapp/base/`.
    2.  Create overlay directories if needed (e.g., `kubernetes/apps/webapp/overlays/production/`).
    3.  Create `kubernetes/apps/webapp/kustomization.yaml`:
        ```yaml
        ---
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization
        namespace: webapp-ns # Default namespace for resources in this Kustomization
        # resources: # If plain YAMLs are directly in this folder or subfolders
        #  - deployment.yaml
        #  - service.yaml
        #  - ingress.yaml
        # Or point to a base:
        bases:
          - ./base # Or an external git repo: git::https://github.com/org/repo//path?ref=tag
        # patchesStrategicMerge:
        #  - patches/deployment-replicas.yaml
        # configMapGenerator:
        #  - name: webapp-config
        #    literals:
        #    - FOO=bar
        # secretGenerator: (For non-sensitive, generated secrets. Use SOPS for actual secrets)
        #  - name: webapp-generated-secret
        #    literals:
        #    - API_KEY=generatedvalue
        images:
          - name: some-image-in-deployment # Original image name
            newName: my-docker-registry/webapp # New image repository
            newTag: "v0.1.0" # Pin image tags!
        ```
    4.  Then, in your Flux structure, you'd point a `Kustomization` CR to this path (see Step 1.4).

*   **C) Plain YAML Manifests:**
    Not commonly used directly for entire applications when Kustomize or Helm are options, but possible.
    1.  Place all YAML files (Deployment, Service, ConfigMap, Secret (SOPS encrypted), Ingress, etc.) directly in `kubernetes/apps/webapp/`.
    2.  You'd still need a Flux `Kustomization` CR pointing to this directory.

### Step 1.3: Manage Application Secrets

If "WebApp" requires API keys, database passwords, or other sensitive information, these must be managed according to the cluster's secret policy.

**For New Applications (Primary Method - Recommended):**
-   **Policy:** All new Kubernetes Secrets must be provisioned and managed through the **1Password Operator** using `OnePasswordItem` CustomResources. Plain Kubernetes `Secret` manifests containing unencrypted data should not be committed to Git.
-   **Workflow:**
    1.  Ensure the 1Password Operator is installed and configured in your cluster.
    2.  Store the actual secret value (e.g., API key, password) in your 1Password vault.
    3.  Define a `OnePasswordItem` CR in your application's manifests (e.g., `kubernetes/apps/webapp/app/onepassword-item.yaml`). This CR tells the operator which item and fields to sync from your 1Password vault.
        ```yaml
        # Example: kubernetes/apps/webapp/app/onepassword-item.yaml
        apiVersion: onepassword.com/v1
        kind: OnePasswordItem
        metadata:
          name: webapp-credentials # This will typically be the name of the K8s Secret created
          namespace: webapp-ns    # Namespace where the K8s Secret will be created
        spec:
          itemPath: "vaults/<VAULT_NAME>/items/<ITEM_TITLE_OR_UUID>"
          # Or use itemTitle and vault combination:
          # itemTitle: "<ITEM_TITLE_IN_1PASSWORD>"
          # vault: "<1PASSWORD_VAULT_NAME>"
        ```
    4.  Commit the `OnePasswordItem` CR to Git. Flux will apply it.
    5.  The 1Password Operator will detect the `OnePasswordItem` CR and create/update a corresponding Kubernetes `Secret` in the specified namespace. The Kubernetes `Secret` will contain the data synced from your 1Password vault.
    6.  Reference this Kubernetes `Secret` in your `HelmRelease` (via `valuesFrom`) or other application manifests (e.g., `envFrom`, `volumeMounts`).
-   **Reference:** For complete details on this policy and `OnePasswordItem` CRD structure, refer to the `1password-secrets-policy.mdc` rule.

**For Legacy Applications or Existing SOPS-encrypted Secrets:**
-   SOPS-encrypted Kubernetes `Secret` files (`*.sops.yaml`) are permitted ONLY for legacy applications or existing secrets that have not yet been migrated to the 1Password Operator.
-   **Workflow (SOPS - Legacy):**
    1.  Create a YAML file with Kubernetes `Secret` objects, e.g., `kubernetes/apps/webapp/secrets-legacy.yaml` (unencrypted first).
        ```yaml
        # Example for SOPS: kubernetes/apps/webapp/secrets-legacy.sops.yaml (after encryption)
        apiVersion: v1
        kind: Secret
        metadata:
          name: webapp-legacy-credentials
          namespace: webapp-ns
        type: Opaque
        stringData: # Use stringData for human-readable values, then encrypt
          DATABASE_USER: "sops:ENCRYPTED_DATA_HERE" # Actual encrypted value after sops command
          API_KEY: "sops:ENCRYPTED_DATA_HERE"       # Actual encrypted value after sops command
        ```
    2.  Encrypt this file using SOPS:
        ```bash
        sops --encrypt --age $(cat age.key.pub) --encrypted-regex '^(data|stringData)$' \
          kubernetes/apps/webapp/secrets-legacy.yaml > kubernetes/apps/webapp/secrets-legacy.sops.yaml
        ```
        (Ensure your `.sops.yaml` (mdc:.sops.yaml) configuration is set up to use your `age.key` (mdc:age.key)).
        **Important:** Securely delete the unencrypted `secrets-legacy.yaml` after encryption.
    3.  Add the `secrets-legacy.sops.yaml` to your application's Kustomization (e.g., `kubernetes/apps/webapp/app/kustomization.yaml`).
    4.  The Flux `Kustomization` CR pointing to this directory will automatically discover and instruct Flux to decrypt `*.sops.yaml` files.
-   **Migration:** Consider migrating legacy SOPS secrets to the 1Password Operator for consistency and centralized management.

**Referencing Kubernetes Secrets in HelmRelease (Universal):**
Regardless of how the Kubernetes `Secret` is provisioned (by 1Password Operator or via legacy SOPS/Flux), you can reference it in your `HelmRelease` using `valuesFrom`:
```yaml
# In kubernetes/apps/webapp/helmrelease.yaml
# ...
spec:
  # ...
  valuesFrom:
    - kind: Secret
      name: webapp-credentials # Name of the K8s Secret (created by 1P Operator or via SOPS)
      # valuesKey: specific-key.yaml # Optional: if the secret data itself is a YAML structure
      # targetPath: secretsFrom1P # Optional: to prefix these values under 'secretsFrom1P.' in the Helm values
# ...
```

### Step 1.4: Ensure Flux Discovers the Application
Flux needs to be told to look at `kubernetes/apps/webapp/`. This is usually managed by a higher-level `Kustomization` CR, typically located in `kubernetes/flux/cluster/` (e.g., `kubernetes/flux/cluster/apps-kustomization.yaml` or similar).

*   **Option 1: Directory Discovery (Common)**
    If the main "apps" `Kustomization` is configured to scan all subdirectories:
    ```yaml
    # Example: kubernetes/flux/cluster/apps-kustomization.yaml
    ---
    apiVersion: kustomize.toolkit.fluxcd.io/v1
    kind: Kustomization
    metadata:
      name: cluster-apps # Or a more specific name like 'apps-general'
      namespace: flux-system
    spec:
      interval: 10m
      path: ./kubernetes/apps # Tells Flux to scan all subdirectories here for Kustomizations or HelmReleases
      prune: true # Crucial: enables Flux to delete resources removed from Git
      sourceRef:
        kind: GitRepository
        name: flux-system # Assuming your main GitRepository CR is named flux-system
      timeout: 5m
      # healthChecks: [...] # Define health checks for aggregated app health
      # dependsOn: # If all apps depend on something, e.g., core components
      #  - name: core-components
      #    namespace: flux-system
    ```
    By simply adding your `kubernetes/apps/webapp/helmrelease.yaml` (or `kustomization.yaml`), Flux will pick it up.

*   **Option 2: Explicit `Kustomization` for the New App**
    If you need more granular control or don't use directory discovery:
    1.  Create `kubernetes/apps/webapp/flux-kustomization.yaml`:
        ```yaml
        ---
        apiVersion: kustomize.toolkit.fluxcd.io/v1
        kind: Kustomization
        metadata:
          name: webapp # Kustomization name for this app
          namespace: flux-system # Flux Kustomizations are typically in flux-system
        spec:
          interval: 10m
          path: ./kubernetes/apps/webapp # Path to this app's manifests FROM THE REPO ROOT
          prune: true
          sourceRef:
            kind: GitRepository
            name: flux-system
          targetNamespace: webapp-ns # Default namespace if not set in child manifests
          # healthChecks: # Specific to this app
          #   - apiVersion: apps/v1
          #     kind: Deployment
          #     name: webapp
          #     namespace: webapp-ns
          # dependsOn: [...]
        ```
    2.  Then, ensure a higher-level `Kustomization` (e.g., in `kubernetes/flux/cluster/`) explicitly includes this new `Kustomization` CR file.

### Step 1.5: Commit and Push to Git
```bash
git add kubernetes/apps/webapp/
# If you added a HelmRepository:
# git add kubernetes/flux/meta/repos/webapp-chart-repo.yaml
# git add kubernetes/flux/meta/repos/kustomization.yaml
git commit -m "feat(app): add webapp deployment"
git push
```
Flux will detect the changes and start deploying "WebApp".

### Step 1.6: Monitor Deployment
```bash
# Check Flux Kustomizations (if you created one explicitly or to see the parent)
flux get kustomizations -A
flux describe kustomization webapp -n flux-system # Or the parent Kustomization

# Check HelmReleases
flux get helmrelease webapp -n webapp-ns
flux describe helmrelease webapp -n webapp-ns
flux logs helmrelease webapp -n webapp-ns --level=debug

# Check Kubernetes resources
kubectl get all -n webapp-ns
kubectl get events -n webapp-ns
kubectl logs deployment/webapp -n webapp-ns -f
```

### Key Considerations/Watch-Outs (Adding):
*   **Idempotency:** Ensure your manifests are idempotent. Flux will re-apply them.
*   **Namespace:** Decide on a namespace. Use `install.createNamespace: true` in `HelmRelease` or create a `Namespace` YAML if not.
*   **Pinned Versions:** ALWAYS pin Helm chart versions and image tags. Avoid `latest`.
*   **Resource Requests/Limits:** Define sensible CPU/memory requests and limits.
*   **Ingress:** If exposing externally or internally, configure Ingress correctly, pointing to the right service and using the correct ingress class name (defined in your `cluster.yaml` and provisioned by `ingress-nginx` or `k8s-gateway`).
*   **`dependsOn`:** Use this in `HelmRelease` or `Kustomization` CRs if your app relies on other Flux-managed components being ready first (e.g., `cert-manager` for certificates, a database, or the 1Password Operator if using `OnePasswordItem` CRs).
*   **Health Checks:** Define health checks in Flux `Kustomization` or `HelmRelease` CRs so Flux knows when your application is truly ready/healthy.
*   **Secret Management:**
    *   For **new applications**, strictly follow the `1password-secrets-policy.mdc` (use 1Password Operator with `OnePasswordItem` CRs). Do not create new SOPS-encrypted secrets.
    *   For **legacy applications**, ensure existing SOPS-encrypted secrets are correctly managed and consider a migration path.
*   **Testing Locally (Advanced):**
    *   `helm template ...`: Render Helm charts locally to inspect output.
    *   `kustomize build ...`: Render Kustomize overlays locally.
    *   `flux build kustomization ... --path ...`: Test Flux `Kustomization` rendering.
*   **Variable Substitution:** If your `makejinja` (mdc:makejinja.toml) setup pre-processes YAMLs before Flux sees them, ensure any variables your app needs are correctly templated. Flux also has its own variable substitution capabilities.
*   **RBAC:** If your application needs specific permissions (ServiceAccounts, Roles, RoleBindings), define them. Helm charts often include these.

## 2. Modifying an Existing Deployment

Modifications follow the GitOps principle: change the declarative configuration in Git, and Flux applies it.

### Step 2.1: Identify and Locate Configuration
Navigate to the application's directory, e.g., `kubernetes/apps/webapp/`. The primary file to modify will usually be:
*   `helmrelease.yaml` (for Helm-based deployments)
*   `kustomization.yaml` and its associated patch files or base manifests (for Kustomize-based deployments)
*   Specific YAML files if using plain manifests.

### Step 2.2: Make Changes
Examples:
*   **Updating Image Version (HelmRelease):**
    Edit `kubernetes/apps/webapp/helmrelease.yaml`:
    ```yaml
    # ...
    spec:
      chart:
        spec:
          version: "1.2.4" # If updating chart version
    # ...
      values:
        image:
          tag: "v0.2.0" # New application image tag
    # ...
    ```
*   **Changing Config Value (HelmRelease):**
    Edit `kubernetes/apps/webapp/helmrelease.yaml` under the `values:` section.
*   **Changing Replica Count (Kustomize):**
    Edit a patch file referenced in `kubernetes/apps/webapp/kustomization.yaml` or update the base Deployment manifest.
*   **Updating Secrets:**
    *   **If using 1Password Operator (`OnePasswordItem`):**
        1.  Update the secret directly in your 1Password vault.
        2.  The 1Password Operator will automatically detect the change (usually within minutes) and update the corresponding Kubernetes `Secret` in the cluster.
        3.  If the `OnePasswordItem` CR itself needs changes (e.g., pointing to a different item, vault, or changing metadata), modify the `onepassword-item.yaml` (or equivalent) file in Git, commit, and push. Flux will apply the CRD change, and the operator will react.
    *   **If managing legacy SOPS-encrypted secrets:**
        1.  Decrypt the relevant `*.sops.yaml` file:
            ```bash
            sops --decrypt kubernetes/apps/webapp/secrets-legacy.sops.yaml > kubernetes/apps/webapp/secrets-legacy.dec.yaml
            ```
        2.  Edit `secrets-legacy.dec.yaml` with your changes.
        3.  Re-encrypt:
            ```bash
            sops --encrypt --age $(cat age.key.pub) --encrypted-regex '^(data|stringData)$' \
              kubernetes/apps/webapp/secrets-legacy.dec.yaml > kubernetes/apps/webapp/secrets-legacy.sops.yaml
            ```
        4.  Securely delete `secrets-legacy.dec.yaml`.
        5.  Commit and push the updated `*.sops.yaml` file. Flux will apply the changes.

### Step 2.3: Commit and Push
```bash
git add kubernetes/apps/webapp/ # Or specific files
git commit -m "fix(webapp): update image to v0.2.0 and adjust config"
git push
```

### Step 2.4: Monitor Changes
Use the same `flux get ...`, `flux describe ...`, `flux logs ...`, and `kubectl ...` commands as when adding a deployment. Pay attention to rolling updates for Deployments.

### Key Considerations/Watch-Outs (Modifying):
*   **Flux Reconciliation Interval:** Changes won't be instant. Flux polls based on the `interval` set in `GitRepository`, `Kustomization`, and `HelmRelease` CRs. You can force a reconciliation:
    ```bash
    flux reconcile kustomization flux-system --with-source # Reconciles the main GitRepository and its Kustomizations
    flux reconcile kustomization webapp -n flux-system --with-source # For a specific app Kustomization
    flux reconcile helmrelease webapp -n webapp-ns --with-source # For a specific HelmRelease
    ```
*   **Impact of Changes:** Understand what a change will do (e.g., pod restarts, configuration reloads).
*   **Helm Upgrade Strategy:** Helm has upgrade strategies. `cleanupOnFail` in `HelmRelease` can be useful.
*   **Immutable Fields:** Some Kubernetes resource fields are immutable after creation (e.g., a Deployment's selector). Changing these might require deleting and recreating the resource, which Flux might handle if `prune` is aggressive, but can be disruptive.
*   **Validating Before Commit:** For complex changes, use `helm lint`, `helm template`, `kustomize build`, or `flux build` locally to catch errors early.
*   **Secret Management Policy:**
    *   Adhere to the `1password-secrets-policy.mdc` for all new secrets (1Password Operator and `OnePasswordItem` CRs).
    *   For legacy systems using SOPS, ensure the `age.key` (mdc:age.key) is secure and backed up (e.g., in 1Password itself). The `.sops.yaml` (mdc:.sops.yaml) file configures SOPS behavior.
*   **Secrets in `valuesFrom`:** When using `valuesFrom` in a `HelmRelease` to inject secrets, ensure the referenced Kubernetes `Secret` is managed correctly (either by the 1Password Operator for new secrets or via legacy SOPS for existing ones) and is present in the cluster before the `HelmRelease` attempts to use it. Use `dependsOn` if necessary to manage order.
*   **Test Environment:** If possible, test significant changes in a staging or development cluster.

## 3. Deleting a Deployment

### Method 3.1: The GitOps Way (Recommended)
This leverages Flux's `prune` capability.
1.  **Remove or Comment Out Application Configuration:**
    *   **For HelmRelease-based apps:** Delete or comment out the `kubernetes/apps/webapp/helmrelease.yaml` file.
    *   **For Kustomize-based apps:**
        *   If the app had its own Flux `Kustomization` CR (e.g., in `kubernetes/apps/webapp/flux-kustomization.yaml`), delete or comment out that file.
        *   If the app's Kustomize directory was just a path in a parent Flux `Kustomization` (e.g., `path: ./kubernetes/apps`), then delete the entire `kubernetes/apps/webapp/` directory.
    *   **If the app was part of a larger Kustomization (e.g., listed in resources):** Remove its entry from the `resources` list in the relevant `kustomization.yaml`.
2.  **Ensure `prune: true`:** The Flux `Kustomization` CR responsible for deploying the application (or its parent) **must** have `spec.prune: true`. This allows Flux to delete resources from the cluster that are no longer present in the Git source.
    ```yaml
    # Example: kubernetes/flux/cluster/apps-kustomization.yaml
    # ...
    spec:
      path: ./kubernetes/apps
      prune: true # THIS IS KEY FOR DELETION
    # ...
    ```
3.  **Commit and Push:**
    ```bash
    git rm -rf kubernetes/apps/webapp/ # Or git rm the specific HelmRelease/Kustomization file
    git commit -m "feat(app): remove webapp deployment"
    git push
    ```
4.  **Monitor Deletion:**
    *   Flux will detect the removal from Git.
    *   The `Kustomization` will be reconciled, and because `prune: true`, Flux will delete the Kubernetes resources previously created for "WebApp" (Deployments, Services, its `HelmRelease` CR if it was a child, etc.).
    *   Check Flux logs and `kubectl get all -n webapp-ns`. The namespace itself might remain if not explicitly managed for deletion.

### Method 3.2: Manual Deletion (Use with Extreme Caution)
You can use `kubectl delete ...` or `helm uninstall ...`, but **this is generally discouraged** as it bypasses the GitOps source of truth.
*   If you manually delete, Flux (if `prune: true`) might try to re-create the resources on its next sync if they are still defined in Git.
*   If you manually delete AND remove from Git, it's fine, but the GitOps way is cleaner.

**To manually delete (if you must, and have also removed from Git):**
```bash
# If HelmRelease was used and you know the release name and namespace:
helm uninstall webapp -n webapp-ns

# Or delete specific resources:
kubectl delete deployment webapp -n webapp-ns
kubectl delete service webapp -n webapp-ns
kubectl delete ingress webapp -n webapp-ns
# etc. for all resources including ConfigMaps, Secrets, ServiceAccounts...

# Optionally delete the namespace if it's empty and no longer needed:
kubectl delete namespace webapp-ns
```

### Key Considerations/Watch-Outs (Deleting):
*   **`prune: true` is Essential:** For GitOps-driven deletion, this is non-negotiable on the relevant Flux `Kustomization`.
*   **PersistentVolumeClaims (PVCs):** By default, PVCs are often not deleted when their StatefulSet or Deployment is deleted, to prevent data loss. You might need to manually delete PVCs if the data is no longer needed. Check the `persistentVolumeReclaimPolicy` of the associated PersistentVolume.
*   **Namespaces:** Flux `Kustomization` does not automatically delete namespaces when `prune: true` if the `Namespace` object itself was created by Flux (e.g. by being part of the kustomization) and then removed. Helm might delete namespaces if `install.createNamespace: true` was used and the chart handles it, but this can be inconsistent. It's often safer to manually delete namespaces after confirming they are empty.
*   **Dependencies:** If other applications `dependsOn` the one you are deleting, they might fail or act unexpectedly. Remove those dependencies first.
*   **CRDs:** If an application installed CustomResourceDefinitions (CRDs), Flux's `Kustomization` with `prune: true` will typically *not* delete CRDs unless explicitly configured to do so (which is rare and risky). Helm also usually doesn't remove CRDs on uninstall unless the chart is specifically built to do so or with special flags. CRDs often require manual deletion if they are no longer needed by any other part of the cluster.

## 4. Troubleshooting Flux Deployments
*   **Check Flux Components:**
    ```bash
    flux check
    flux get all -A # General overview
    ```
*   **Sources (GitRepo, HelmRepo):**
    ```bash
    flux get sources all -A
    flux describe gitrepository flux-system -n flux-system # Check sync status, errors
    flux describe helmrepository <repo-name> -n flux-system
    ```
*   **Kustomizations:**
    ```bash
    flux get kustomizations -A
    flux describe kustomization <ks-name> -n flux-system
    flux logs kustomization <ks-name> -n flux-system --level=debug
    flux trace kustomization <ks-name> -n flux-system --kind HelmRelease --api-version helm.toolkit.fluxcd.io # Trace a specific resource
    ```
*   **HelmReleases:**
    ```bash
    flux get helmreleases -A
    flux describe helmrelease <hr-name> -n <app-namespace>
    flux logs helmrelease <hr-name> -n <app-namespace> --level=debug
    ```
*   **Force Reconciliation:**
    ```bash
    flux reconcile kustomization <ks-name> -n flux-system --with-source
    flux reconcile helmrelease <hr-name> -n <app-namespace> --with-source
    ```
*   **Suspend & Resume (to temporarily stop Flux from acting on a resource):**
    ```bash
    flux suspend kustomization <ks-name> -n flux-system
    flux resume kustomization <ks-name> -n flux-system
    # Same for helmrelease, gitrepository, etc.
    ```
*   **Kubernetes Events & Logs:**
    ```bash
    kubectl get events -n <app-namespace> --sort-by='.metadata.creationTimestamp'
    kubectl logs -n <app-namespace> deployment/<app-deployment-name> -f
    kubectl describe pod -n <app-namespace> <app-pod-name>
    ```

## 5. General Best Practices
*   **Declarative Over Imperative:** Always prefer defining state in Git over manual `kubectl` or `helm` commands.
*   **Pin Versions:** Use specific, pinned versions for Helm charts and container images.
*   **Small, Frequent Commits:** Make changes in small, logical commits.
*   **Secret Management Policy:**
    *   Adhere to the `1password-secrets-policy.mdc` for all new secrets (1Password Operator and `OnePasswordItem` CRs).
    *   For legacy systems using SOPS, ensure the `age.key` (mdc:age.key) is secure and backed up (e.g., in 1Password itself). The `.sops.yaml` (mdc:.sops.yaml) file configures SOPS behavior.
*   **Validate and Lint:** Use tools like `kubeval`, `kustomize build --validate=true`, `helm lint` before pushing.
*   **Understand `prune`:** Be aware of how `prune: true` works and its implications.
*   **Monitor Flux:** Keep an eye on Flux component logs and CR statuses.
*   **Secrets in `valuesFrom`:** When using `valuesFrom` in a `HelmRelease` to inject secrets, ensure the referenced Kubernetes `Secret` is managed correctly (either by the 1Password Operator for new secrets or via legacy SOPS for existing ones) and is present in the cluster before the `HelmRelease` attempts to use it. Use `dependsOn` if necessary to manage order.
*   **Test Environment:** If possible, test significant changes in a staging or development cluster.

This guide should provide a solid foundation for managing your applications with Flux in a structured and maintainable way. Remember that your specific file names or directory structures might vary slightly from these examples, but the core Flux concepts and CRs will be the same.
