---
description:
globs:
alwaysApply: true
---
description: "Policy: Enforces secret management via External Secrets Operator (ESO) and 1Password. Prohibits plain secrets in Git. Outlines required CRDs (`ClusterSecretStore`, `ExternalSecret`). Note: Review provider details in conjunction with deprecation notices."

# Enforce External Secrets Operator and 1Password for Secret Management

**_IMPORTANT NOTE: This rule describes a legacy pattern for integrating External Secrets Operator (ESO) with the 1Password Connect Server. For managing NEW secrets, please refer to the current \'1Password Secrets Policy\', which mandates the use of the 1Password Operator and `OnePasswordItem` CRs._**

## Scope
This rule applies to all Kubernetes manifests in:
- `kubernetes/apps/`
- `kubernetes/components/`
- Any other directory containing Kubernetes `Secret` definitions

## Requirement
- Do not commit any plain `Secret` manifests with unencrypted or manually created data.
- All secrets must be managed via the External Secrets Operator (ESO) backed by 1Password Connect Server:

  1. Define a `ClusterSecretStore` named `onepassword-connect` pointing to your Connect server.
  2. Store Connect credentials as Kubernetes Secrets (`connect-credentials.json`) and token manually or via automation.
  3. For each secret, create an `ExternalSecret` in the appropriate namespace:
     - `spec.secretStoreRef.name: onepassword-connect`
     - Map 1Password item fields to Kubernetes `secretKey` via `spec.data` or `spec.dataFrom.extract`.
  4. Reference the resulting Kubernetes `Secret` in application manifests using `valuesFrom.secretKeyRef` or `env.valueFrom.secretKeyRef`.

## References

- External Secrets Operator Overview: https://external-secrets.io/latest/introduction/overview/
- 1Password Connect Server Provider: https://external-secrets.io/latest/provider/1password-automation/
- 1Password Connect Documentation: https://developer.1password.com/docs/connect/