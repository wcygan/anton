---
description:
globs:
alwaysApply: true
---
# Kustomization Structure and Purpose for `kubernetes/apps/default/`

This rule documents the structure and purpose of the Kustomize and Flux resources used to manage applications in the `default` namespace, specifically referencing the `echo` app as an example.

## Structure Overview

- [`kubernetes/apps/default/kustomization.yaml`](mdc:kubernetes/apps/default/kustomization.yaml):
  - **Purpose:** Entry point for Kustomize/Flux in the `default` namespace. Defines which components and app resources to include.
  - **Includes:**
    - `components`: Shared overlays or base resources (e.g., `../../components/common`, `../../components/repos/app-template`).
    - `resources`: App-specific Kustomization CRDs (e.g., `./echo/ks.yaml`).

- [`kubernetes/apps/default/echo/ks.yaml`](mdc:kubernetes/apps/default/echo/ks.yaml):
  - **Purpose:** Flux `Kustomization` CRD. Tells Flux to recursively apply the manifests in the `app` subdirectory for the `echo` app.
  - **Key fields:**
    - `path`: Points to [`kubernetes/apps/default/echo/app`](mdc:kubernetes/apps/default/echo/app).
    - `sourceRef`: Uses the `flux-system` GitRepository as the source.
    - `targetNamespace`: Sets the namespace for resources.

- [`kubernetes/apps/default/echo/app/kustomization.yaml`](mdc:kubernetes/apps/default/echo/app/kustomization.yaml):
  - **Purpose:** Standard Kustomize manifest. Includes the actual application resource(s) for deployment.
  - **Includes:**
    - `resources`: [`./helmrelease.yaml`](mdc:kubernetes/apps/default/echo/app/helmrelease.yaml)

- [`kubernetes/apps/default/echo/app/helmrelease.yaml`](mdc:kubernetes/apps/default/echo/app/helmrelease.yaml):
  - **Purpose:** Flux `HelmRelease` CRD. Defines how to deploy the `echo` app using a Helm chart, including all configuration (image, service, ingress, etc.).

## Purpose Summary

This structure enables modular, GitOps-driven deployment of applications in the `default` namespace. The top-level `kustomization.yaml` acts as the entry point, chaining together Flux and Kustomize resources to manage each app (like `echo`) in a scalable and maintainable way.

## Using This Pattern in Other Namespaces

This modular pattern is used throughout the repository for other namespaces as well, not just `default`. Each namespace (such as `kube-system`, `flux-system`, `cert-manager`, `network`, etc.) typically has its own `kustomization.yaml` at `kubernetes/apps/<namespace>/kustomization.yaml`.

**General Recipe:**
- To add an app to a namespace:
  1. Create a subdirectory for the app under the namespace (e.g., `kubernetes/apps/<namespace>/<app>/`).
  2. Add a `ks.yaml` in the app directory, which is a Flux Kustomization CRD pointing to the app's `app/` subdirectory.
  3. In the `app/` subdirectory, add a `kustomization.yaml` and a `helmrelease.yaml` (or other manifests as needed).
  4. Reference the app's `ks.yaml` in the namespace's top-level `kustomization.yaml` under `resources:`.

**Example Structure (from the file tree):**

```
kubernetes/apps/
├── default/
│   ├── echo/
│   │   ├── app/
│   │   │   ├── helmrelease.yaml
│   │   │   └── kustomization.yaml
│   │   └── ks.yaml
│   └── kustomization.yaml
├── kube-system/
│   ├── cilium/
│   │   ├── app/
│   │   │   ├── helmrelease.yaml
│   │   │   └── kustomization.yaml
│   │   └── ks.yaml
│   └── kustomization.yaml
├── flux-system/
│   ├── flux-instance/
│   │   ├── app/
│   │   │   ├── helmrelease.yaml
│   │   │   └── kustomization.yaml
│   │   └── ks.yaml
│   └── kustomization.yaml
├── cert-manager/
│   ├── cert-manager/
│   │   ├── app/
│   │   │   ├── helmrelease.yaml
│   │   │   └── kustomization.yaml
│   │   └── ks.yaml
│   └── kustomization.yaml
├── network/
│   ├── external/
│   │   ├── cloudflared/
│   │   │   ├── helmrelease.yaml
│   │   │   └── kustomization.yaml
│   │   └── ks.yaml
│   └── kustomization.yaml
...
```

**Key Points:**
- This structure allows each namespace to manage its apps independently and modularly.
- Adding or removing an app is as simple as adding/removing its subdirectory and updating the namespace's `kustomization.yaml`.
- The pattern supports both Helm-based and manifest-based apps, and can be extended for overlays, secrets, or other resources as needed.
- This approach scales well for large clusters with many namespaces and apps, keeping configuration organized and maintainable.
